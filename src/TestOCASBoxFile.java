/**
 * Test the S-boxes generated by a set of OCA pairs specified in a file as
 * pairs of local rules.
 * 
 * @author Luca Mariot
 */

import java.io.*;
import java.util.Scanner;
import java.math.BigInteger;
import ca.*;
import bf.*;

public class TestOCASBoxFile {
    
    public static void main(String[] args) {
        
        if(args.length != 2) {
            
            System.err.println("Usage: java lowlevelfunc.oa.TestLSCASboxFile filename nvar");
            System.exit(1);
            
        }
        
        File filename = new File(args[0]);
        int nvar = Integer.parseInt(args[1]);
        int tlength = (int)Math.pow(2, nvar);
        int ncells = 2*(nvar-1);
        
        //Creates the set of indices to check crypto properties.
        int[][] indices = new int[nvar][];
        for(int i=0; i<nvar; i++) {
            
            indices[i] = CombTools.genBinCombs(nvar-i-1, i+1);
            
        }
        
        try {
            
            Scanner sc = new Scanner(filename);
            
            while(sc.hasNext()) {
                
                //Read the Wolfram codes of the two boolean functions on the next line
                String text1 = sc.next();
                String text2 = sc.next();
                boolean[] rule1 = new boolean[tlength];
                boolean[] rule2 = new boolean[tlength];
                    
                BigInteger rule1num = new BigInteger(text1);
                BigInteger rule2num = new BigInteger(text2);

                rule1 = BinTools.dec2Bin(rule1num, tlength);
                rule2 = BinTools.dec2Bin(rule2num, tlength);
                
                OneDimCA ca1 = new OneDimCA(ncells, rule1, nvar);
                OneDimCA ca2 = new OneDimCA(ncells, rule2, nvar);

                boolean[][] sbox = BuildOCASbox.buildSbox(ca1, ca2);

                //Compute balancedness, nonlinearity and delta uniformity of the S-box
                boolean bal = SboxesTools.computeUnbalancedness(ncells, sbox);
                int nl = SboxesTools.calcNlinSbox(sbox, ncells);
                BooleanFunction bf1 = new BooleanFunction(rule1, nvar);
                BooleanFunction bf2 = new BooleanFunction(rule2, nvar);
                CheckProp.computeANF(bf1);
                CheckProp.computeANF(bf2);
                System.out.print("Rules "+BinTools.bin2DecBig(rule1)+" ");
                CheckProp.printANF(bf1);
                System.out.print(" - "+BinTools.bin2DecBig(rule2)+" ");
                CheckProp.printANF(bf2);
                System.out.print(" S-box: ");
                System.out.print("\tBalanced: "+bal);
                System.out.print("\tNLterms: "+CheckProp.checkNonlinearTerms(bf1, bf2));
                System.out.println("\t Nonlinearity: "+nl);
                
            }
            
            sc.close();
            
        } catch(IOException ioe) {
            System.err.println("I/O error");
            ioe.printStackTrace();
            System.exit(3);
        }
        
    }
    
}
